name: Deploys

on:
  push:
    branches:
      - trunk

jobs:
  deploy:
    # Only continue if the commit message has '[deploy]' in it
    if: contains(toJson(github.event.commits), '[deploy]') == true
    name: Deploy Docker images
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0
      - name: Output Docker info
        run: docker info
      - name: Sets build date
        run: echo "BUILD_DATE=$(date '+%Y%m%d')" >> $GITHUB_ENV
      - name: Sets prerelease to false by default
        run: echo "PRERELEASE=false" >> $GITHUB_ENV
      - name: Build base image to get Grid version
        run: VERSION="local" BUILD_DATE=${BUILD_DATE} make base
      - name: Get Grid version
        # sed used to remove last comma of Selenium version output
        run: echo "GRID_VERSION=$(docker run --rm selenium/base:local-${BUILD_DATE} java -jar /opt/selenium/selenium-server.jar hub --version | awk '{print $3}' | sed 's/\(.*\),/\1 /')" | awk '{$1=$1;print}' >> $GITHUB_ENV
      - name: Is it a prerelease?
        run: echo "GRID_VERSION=${GRID_VERSION}-prerelease" >> $GITHUB_ENV && echo "PRERELEASE=true" >> $GITHUB_ENV
        if: contains(toJson(github.event.commits), '[prerelease]') == true
      - name: Display Grid version
        run: echo ${GRID_VERSION}
      - name: Remove local Docker tag
        run: docker rmi selenium/base:local-${BUILD_DATE}
      - name: Sets env var for the next tag
        run: echo "NEXT_TAG=${GRID_VERSION}-${BUILD_DATE}" >> $GITHUB_ENV
      - name: Get latest tag
        run: echo "LATEST_TAG=$(git tag --sort=-version:refname | grep "^[^selenium]" | head -n 1)" >> $GITHUB_ENV
      - name: Display latest tag
        run: echo ${LATEST_TAG}
      - name: Update tag in docs and files
        run: ./update_tag_in_docs_and_files.sh ${LATEST_TAG} ${NEXT_TAG}
      - name: Build images
        run: VERSION="${GRID_VERSION}" BUILD_DATE=${BUILD_DATE} make build
      - name: Login Docker Hub
        run: docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
        env:
          DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
      - name: Deploy new images
        uses: nick-invision/retry@e88a9994b039653512d697de1bce46b00bfe11b5 # v2
        with:
          timeout_minutes: 20
          max_attempts: 3
          command: VERSION="${GRID_VERSION}" BUILD_DATE=${BUILD_DATE} make release
      - name: Tag images as latest
        uses: nick-invision/retry@e88a9994b039653512d697de1bce46b00bfe11b5 # v2
        with:
          timeout_minutes: 20
          max_attempts: 3
          command: VERSION="${GRID_VERSION}" BUILD_DATE=${BUILD_DATE} make tag_latest
      - name: Deploy latest tag
        uses: nick-invision/retry@e88a9994b039653512d697de1bce46b00bfe11b5 # v2
        with:
          timeout_minutes: 20
          max_attempts: 3
          command: VERSION="${GRID_VERSION}" BUILD_DATE=${BUILD_DATE} make release_latest
      - name: Tag browser images
        uses: nick-invision/retry@e88a9994b039653512d697de1bce46b00bfe11b5 # v2
        with:
          timeout_minutes: 20
          max_attempts: 3
          command: VERSION="${GRID_VERSION}" BUILD_DATE=${BUILD_DATE} PUSH_IMAGE=true make tag_and_push_browser_images
      - name: Commit files
        run: |
          git config --local user.email "selenium-ci@users.noreply.github.com"
          git config --local user.name "Selenium CI Bot"
          git commit -m "Update tag in docs and files [skip ci]" -a
      - name: Push changes
        uses: ad-m/github-push-action@a3fd843e49cd58d296bdd2431c4853569a1b900f # master
        with:
          github_token: ${{ secrets.SELENIUM_CI_TOKEN }}
          branch: trunk
      - name: Create release notes (release_notes.md)
        run: ./generate_release_notes.sh ${LATEST_TAG} origin/trunk ${GRID_VERSION} ${BUILD_DATE}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.GRID_VERSION }}-${{ env.BUILD_DATE }}
          release_name: ${{ env.GRID_VERSION }}-${{ env.BUILD_DATE }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ env.PRERELEASE }}
